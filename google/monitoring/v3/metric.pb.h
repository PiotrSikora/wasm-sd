// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/monitoring/v3/metric.proto

#ifndef PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto
#define PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "google/api/annotations.pb.h"
#include "google/api/label.pb.h"
#include "google/api/metric.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/monitoring/v3/common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fmonitoring_2fv3_2fmetric_2eproto 

namespace protobuf_google_2fmonitoring_2fv3_2fmetric_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_google_2fmonitoring_2fv3_2fmetric_2eproto
namespace google {
namespace monitoring {
namespace v3 {
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class TimeSeries;
class TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
}  // namespace v3
}  // namespace monitoring
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::monitoring::v3::Point* Arena::CreateMaybeMessage<::google::monitoring::v3::Point>(Arena*);
template<> ::google::monitoring::v3::TimeSeries* Arena::CreateMaybeMessage<::google::monitoring::v3::TimeSeries>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace monitoring {
namespace v3 {

// ===================================================================

class Point : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:google.monitoring.v3.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.monitoring.v3.TimeInterval interval = 1;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 1;
  private:
  const ::google::monitoring::v3::TimeInterval& _internal_interval() const;
  public:
  const ::google::monitoring::v3::TimeInterval& interval() const;
  ::google::monitoring::v3::TimeInterval* release_interval();
  ::google::monitoring::v3::TimeInterval* mutable_interval();
  void set_allocated_interval(::google::monitoring::v3::TimeInterval* interval);

  // .google.monitoring.v3.TypedValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  private:
  const ::google::monitoring::v3::TypedValue& _internal_value() const;
  public:
  const ::google::monitoring::v3::TypedValue& value() const;
  ::google::monitoring::v3::TypedValue* release_value();
  ::google::monitoring::v3::TypedValue* mutable_value();
  void set_allocated_value(::google::monitoring::v3::TypedValue* value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::monitoring::v3::TimeInterval* interval_;
  ::google::monitoring::v3::TypedValue* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fmetric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeSeries : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:google.monitoring.v3.TimeSeries) */ {
 public:
  TimeSeries();
  virtual ~TimeSeries();

  TimeSeries(const TimeSeries& from);

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeSeries(TimeSeries&& from) noexcept
    : TimeSeries() {
    *this = ::std::move(from);
  }

  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TimeSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
               &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TimeSeries* other);
  friend void swap(TimeSeries& a, TimeSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeSeries* New() const final {
    return CreateMaybeMessage<TimeSeries>(NULL);
  }

  TimeSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeSeries>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TimeSeries& from);
  void MergeFrom(const TimeSeries& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.monitoring.v3.Point points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  ::google::monitoring::v3::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >*
      mutable_points();
  const ::google::monitoring::v3::Point& points(int index) const;
  ::google::monitoring::v3::Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >&
      points() const;

  // .google.api.Metric metric = 1;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;
  private:
  const ::google::api::Metric& _internal_metric() const;
  public:
  const ::google::api::Metric& metric() const;
  ::google::api::Metric* release_metric();
  ::google::api::Metric* mutable_metric();
  void set_allocated_metric(::google::api::Metric* metric);

  // .google.api.MonitoredResource resource = 2;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  private:
  const ::google::api::MonitoredResource& _internal_resource() const;
  public:
  const ::google::api::MonitoredResource& resource() const;
  ::google::api::MonitoredResource* release_resource();
  ::google::api::MonitoredResource* mutable_resource();
  void set_allocated_resource(::google::api::MonitoredResource* resource);

  // .google.api.MonitoredResourceMetadata metadata = 7;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 7;
  private:
  const ::google::api::MonitoredResourceMetadata& _internal_metadata() const;
  public:
  const ::google::api::MonitoredResourceMetadata& metadata() const;
  ::google::api::MonitoredResourceMetadata* release_metadata();
  ::google::api::MonitoredResourceMetadata* mutable_metadata();
  void set_allocated_metadata(::google::api::MonitoredResourceMetadata* metadata);

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  void clear_metric_kind();
  static const int kMetricKindFieldNumber = 3;
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 4;
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);

  // @@protoc_insertion_point(class_scope:google.monitoring.v3.TimeSeries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point > points_;
  ::google::api::Metric* metric_;
  ::google::api::MonitoredResource* resource_;
  ::google::api::MonitoredResourceMetadata* metadata_;
  int metric_kind_;
  int value_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_google_2fmonitoring_2fv3_2fmetric_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// .google.monitoring.v3.TimeInterval interval = 1;
inline bool Point::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
inline const ::google::monitoring::v3::TimeInterval& Point::_internal_interval() const {
  return *interval_;
}
inline const ::google::monitoring::v3::TimeInterval& Point::interval() const {
  const ::google::monitoring::v3::TimeInterval* p = interval_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::TimeInterval*>(
      &::google::monitoring::v3::_TimeInterval_default_instance_);
}
inline ::google::monitoring::v3::TimeInterval* Point::release_interval() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.interval)
  
  ::google::monitoring::v3::TimeInterval* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::TimeInterval* Point::mutable_interval() {
  
  if (interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TimeInterval>(GetArenaNoVirtual());
    interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.interval)
  return interval_;
}
inline void Point::set_allocated_interval(::google::monitoring::v3::TimeInterval* interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interval_);
  }
  if (interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.interval)
}

// .google.monitoring.v3.TypedValue value = 2;
inline bool Point::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline const ::google::monitoring::v3::TypedValue& Point::_internal_value() const {
  return *value_;
}
inline const ::google::monitoring::v3::TypedValue& Point::value() const {
  const ::google::monitoring::v3::TypedValue* p = value_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.Point.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::monitoring::v3::TypedValue*>(
      &::google::monitoring::v3::_TypedValue_default_instance_);
}
inline ::google::monitoring::v3::TypedValue* Point::release_value() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.Point.value)
  
  ::google::monitoring::v3::TypedValue* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::monitoring::v3::TypedValue* Point::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::monitoring::v3::TypedValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.Point.value)
  return value_;
}
inline void Point::set_allocated_value(::google::monitoring::v3::TypedValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.Point.value)
}

// -------------------------------------------------------------------

// TimeSeries

// .google.api.Metric metric = 1;
inline bool TimeSeries::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
inline const ::google::api::Metric& TimeSeries::_internal_metric() const {
  return *metric_;
}
inline const ::google::api::Metric& TimeSeries::metric() const {
  const ::google::api::Metric* p = metric_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::Metric*>(
      &::google::api::_Metric_default_instance_);
}
inline ::google::api::Metric* TimeSeries::release_metric() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.metric)
  
  ::google::api::Metric* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline ::google::api::Metric* TimeSeries::mutable_metric() {
  
  if (metric_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::Metric>(GetArenaNoVirtual());
    metric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.metric)
  return metric_;
}
inline void TimeSeries::set_allocated_metric(::google::api::Metric* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metric_);
  }
  if (metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    
  } else {
    
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.metric)
}

// .google.api.MonitoredResource resource = 2;
inline bool TimeSeries::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
inline const ::google::api::MonitoredResource& TimeSeries::_internal_resource() const {
  return *resource_;
}
inline const ::google::api::MonitoredResource& TimeSeries::resource() const {
  const ::google::api::MonitoredResource* p = resource_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::MonitoredResource*>(
      &::google::api::_MonitoredResource_default_instance_);
}
inline ::google::api::MonitoredResource* TimeSeries::release_resource() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.resource)
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::google::api::MonitoredResource* TimeSeries::mutable_resource() {
  
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.resource)
  return resource_;
}
inline void TimeSeries::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resource_);
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.resource)
}

// .google.api.MonitoredResourceMetadata metadata = 7;
inline bool TimeSeries::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline const ::google::api::MonitoredResourceMetadata& TimeSeries::_internal_metadata() const {
  return *metadata_;
}
inline const ::google::api::MonitoredResourceMetadata& TimeSeries::metadata() const {
  const ::google::api::MonitoredResourceMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::google::api::MonitoredResourceMetadata*>(
      &::google::api::_MonitoredResourceMetadata_default_instance_);
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::release_metadata() {
  // @@protoc_insertion_point(field_release:google.monitoring.v3.TimeSeries.metadata)
  
  ::google::api::MonitoredResourceMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::google::api::MonitoredResourceMetadata* TimeSeries::mutable_metadata() {
  
  if (metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResourceMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.metadata)
  return metadata_;
}
inline void TimeSeries::set_allocated_metadata(::google::api::MonitoredResourceMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:google.monitoring.v3.TimeSeries.metadata)
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3;
inline void TimeSeries::clear_metric_kind() {
  metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind TimeSeries::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.metric_kind)
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(metric_kind_);
}
inline void TimeSeries::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  metric_kind_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.metric_kind)
}

// .google.api.MetricDescriptor.ValueType value_type = 4;
inline void TimeSeries::clear_value_type() {
  value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType TimeSeries::value_type() const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.value_type)
  return static_cast< ::google::api::MetricDescriptor_ValueType >(value_type_);
}
inline void TimeSeries::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:google.monitoring.v3.TimeSeries.value_type)
}

// repeated .google.monitoring.v3.Point points = 5;
inline int TimeSeries::points_size() const {
  return points_.size();
}
inline void TimeSeries::clear_points() {
  points_.Clear();
}
inline ::google::monitoring::v3::Point* TimeSeries::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:google.monitoring.v3.TimeSeries.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >*
TimeSeries::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:google.monitoring.v3.TimeSeries.points)
  return &points_;
}
inline const ::google::monitoring::v3::Point& TimeSeries::points(int index) const {
  // @@protoc_insertion_point(field_get:google.monitoring.v3.TimeSeries.points)
  return points_.Get(index);
}
inline ::google::monitoring::v3::Point* TimeSeries::add_points() {
  // @@protoc_insertion_point(field_add:google.monitoring.v3.TimeSeries.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::monitoring::v3::Point >&
TimeSeries::points() const {
  // @@protoc_insertion_point(field_list:google.monitoring.v3.TimeSeries.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace monitoring
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_google_2fmonitoring_2fv3_2fmetric_2eproto
