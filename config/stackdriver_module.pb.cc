// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/stackdriver_module.proto

#include "config/stackdriver_module.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_config_2fstackdriver_5fmodule_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_config_2fstackdriver_5fmodule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse;
}  // namespace protobuf_config_2fstackdriver_5fmodule_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace config {
class StackdriverModule_MonitoredResourceLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse>
      _instance;
} _StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse_default_instance_;
class StackdriverModuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackdriverModule>
      _instance;
} _StackdriverModule_default_instance_;
}  // namespace config
namespace protobuf_config_2fstackdriver_5fmodule_2eproto {
static void InitDefaultsStackdriverModule_MonitoredResourceLabelsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse();
  }
  ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStackdriverModule_MonitoredResourceLabelsEntry_DoNotUse}, {}};

static void InitDefaultsStackdriverModule() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_StackdriverModule_default_instance_;
    new (ptr) ::config::StackdriverModule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::StackdriverModule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StackdriverModule =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStackdriverModule}, {
      &protobuf_config_2fstackdriver_5fmodule_2eproto::scc_info_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StackdriverModule.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, enable_logging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, enable_monitoring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, monitored_resource_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, monitored_resource_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::StackdriverModule, flush_interval_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::config::StackdriverModule)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::config::_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::config::_StackdriverModule_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "config/stackdriver_module.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037config/stackdriver_module.proto\022\006confi"
      "g\032\036google/protobuf/duration.proto\"\311\002\n\021St"
      "ackdriverModule\022\026\n\016enable_logging\030\001 \001(\010\022"
      "\031\n\021enable_monitoring\030\002 \001(\010\022\022\n\nproject_id"
      "\030\003 \001(\t\022\037\n\027monitored_resource_type\030\004 \001(\t\022"
      "Y\n\031monitored_resource_labels\030\005 \003(\01326.con"
      "fig.StackdriverModule.MonitoredResourceL"
      "abelsEntry\0221\n\016flush_interval\030\006 \001(\0132\031.goo"
      "gle.protobuf.Duration\032>\n\034MonitoredResour"
      "ceLabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\t:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config/stackdriver_module.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_config_2fstackdriver_5fmodule_2eproto
namespace config {

// ===================================================================

StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse() {}
StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::MergeFrom(const StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_config_2fstackdriver_5fmodule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2fstackdriver_5fmodule_2eproto::file_level_metadata[0];
}
void StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void StackdriverModule::InitAsDefaultInstance() {
  ::config::_StackdriverModule_default_instance_._instance.get_mutable()->flush_interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void StackdriverModule::clear_flush_interval() {
  if (GetArenaNoVirtual() == NULL && flush_interval_ != NULL) {
    delete flush_interval_;
  }
  flush_interval_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackdriverModule::kEnableLoggingFieldNumber;
const int StackdriverModule::kEnableMonitoringFieldNumber;
const int StackdriverModule::kProjectIdFieldNumber;
const int StackdriverModule::kMonitoredResourceTypeFieldNumber;
const int StackdriverModule::kMonitoredResourceLabelsFieldNumber;
const int StackdriverModule::kFlushIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackdriverModule::StackdriverModule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_config_2fstackdriver_5fmodule_2eproto::scc_info_StackdriverModule.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.StackdriverModule)
}
StackdriverModule::StackdriverModule(const StackdriverModule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monitored_resource_labels_.MergeFrom(from.monitored_resource_labels_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  monitored_resource_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitored_resource_type().size() > 0) {
    monitored_resource_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitored_resource_type_);
  }
  if (from.has_flush_interval()) {
    flush_interval_ = new ::google::protobuf::Duration(*from.flush_interval_);
  } else {
    flush_interval_ = NULL;
  }
  ::memcpy(&enable_logging_, &from.enable_logging_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_monitoring_) -
    reinterpret_cast<char*>(&enable_logging_)) + sizeof(enable_monitoring_));
  // @@protoc_insertion_point(copy_constructor:config.StackdriverModule)
}

void StackdriverModule::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitored_resource_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flush_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_monitoring_) -
      reinterpret_cast<char*>(&flush_interval_)) + sizeof(enable_monitoring_));
}

StackdriverModule::~StackdriverModule() {
  // @@protoc_insertion_point(destructor:config.StackdriverModule)
  SharedDtor();
}

void StackdriverModule::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitored_resource_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flush_interval_;
}

void StackdriverModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StackdriverModule::descriptor() {
  ::protobuf_config_2fstackdriver_5fmodule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2fstackdriver_5fmodule_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StackdriverModule& StackdriverModule::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_config_2fstackdriver_5fmodule_2eproto::scc_info_StackdriverModule.base);
  return *internal_default_instance();
}


void StackdriverModule::Clear() {
// @@protoc_insertion_point(message_clear_start:config.StackdriverModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monitored_resource_labels_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitored_resource_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && flush_interval_ != NULL) {
    delete flush_interval_;
  }
  flush_interval_ = NULL;
  ::memset(&enable_logging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_monitoring_) -
      reinterpret_cast<char*>(&enable_logging_)) + sizeof(enable_monitoring_));
  _internal_metadata_.Clear();
}

bool StackdriverModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.StackdriverModule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable_logging = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_logging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_monitoring = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_monitoring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "config.StackdriverModule.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitored_resource_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitored_resource_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitored_resource_type().data(), static_cast<int>(this->monitored_resource_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "config.StackdriverModule.monitored_resource_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> monitored_resource_labels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&monitored_resource_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "config.StackdriverModule.MonitoredResourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "config.StackdriverModule.MonitoredResourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration flush_interval = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flush_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.StackdriverModule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.StackdriverModule)
  return false;
#undef DO_
}

void StackdriverModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.StackdriverModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_logging = 1;
  if (this->enable_logging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_logging(), output);
  }

  // bool enable_monitoring = 2;
  if (this->enable_monitoring() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_monitoring(), output);
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "config.StackdriverModule.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->project_id(), output);
  }

  // string monitored_resource_type = 4;
  if (this->monitored_resource_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitored_resource_type().data(), static_cast<int>(this->monitored_resource_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "config.StackdriverModule.monitored_resource_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->monitored_resource_type(), output);
  }

  // map<string, string> monitored_resource_labels = 5;
  if (!this->monitored_resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "config.StackdriverModule.MonitoredResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "config.StackdriverModule.MonitoredResourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->monitored_resource_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->monitored_resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->monitored_resource_labels().begin();
          it != this->monitored_resource_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(monitored_resource_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->monitored_resource_labels().begin();
          it != this->monitored_resource_labels().end(); ++it) {
        entry.reset(monitored_resource_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Duration flush_interval = 6;
  if (this->has_flush_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_flush_interval(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:config.StackdriverModule)
}

::google::protobuf::uint8* StackdriverModule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.StackdriverModule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_logging = 1;
  if (this->enable_logging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_logging(), target);
  }

  // bool enable_monitoring = 2;
  if (this->enable_monitoring() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_monitoring(), target);
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "config.StackdriverModule.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->project_id(), target);
  }

  // string monitored_resource_type = 4;
  if (this->monitored_resource_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitored_resource_type().data(), static_cast<int>(this->monitored_resource_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "config.StackdriverModule.monitored_resource_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monitored_resource_type(), target);
  }

  // map<string, string> monitored_resource_labels = 5;
  if (!this->monitored_resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "config.StackdriverModule.MonitoredResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "config.StackdriverModule.MonitoredResourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->monitored_resource_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->monitored_resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->monitored_resource_labels().begin();
          it != this->monitored_resource_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(monitored_resource_labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->monitored_resource_labels().begin();
          it != this->monitored_resource_labels().end(); ++it) {
        entry.reset(monitored_resource_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Duration flush_interval = 6;
  if (this->has_flush_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_flush_interval(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.StackdriverModule)
  return target;
}

size_t StackdriverModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.StackdriverModule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> monitored_resource_labels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->monitored_resource_labels_size());
  {
    ::std::unique_ptr<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->monitored_resource_labels().begin();
        it != this->monitored_resource_labels().end(); ++it) {
      entry.reset(monitored_resource_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string project_id = 3;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string monitored_resource_type = 4;
  if (this->monitored_resource_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitored_resource_type());
  }

  // .google.protobuf.Duration flush_interval = 6;
  if (this->has_flush_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *flush_interval_);
  }

  // bool enable_logging = 1;
  if (this->enable_logging() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_monitoring = 2;
  if (this->enable_monitoring() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StackdriverModule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.StackdriverModule)
  GOOGLE_DCHECK_NE(&from, this);
  const StackdriverModule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackdriverModule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.StackdriverModule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.StackdriverModule)
    MergeFrom(*source);
  }
}

void StackdriverModule::MergeFrom(const StackdriverModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.StackdriverModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monitored_resource_labels_.MergeFrom(from.monitored_resource_labels_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.monitored_resource_type().size() > 0) {

    monitored_resource_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitored_resource_type_);
  }
  if (from.has_flush_interval()) {
    mutable_flush_interval()->::google::protobuf::Duration::MergeFrom(from.flush_interval());
  }
  if (from.enable_logging() != 0) {
    set_enable_logging(from.enable_logging());
  }
  if (from.enable_monitoring() != 0) {
    set_enable_monitoring(from.enable_monitoring());
  }
}

void StackdriverModule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.StackdriverModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackdriverModule::CopyFrom(const StackdriverModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.StackdriverModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackdriverModule::IsInitialized() const {
  return true;
}

void StackdriverModule::Swap(StackdriverModule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackdriverModule::InternalSwap(StackdriverModule* other) {
  using std::swap;
  monitored_resource_labels_.Swap(&other->monitored_resource_labels_);
  project_id_.Swap(&other->project_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  monitored_resource_type_.Swap(&other->monitored_resource_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flush_interval_, other->flush_interval_);
  swap(enable_logging_, other->enable_logging_);
  swap(enable_monitoring_, other->enable_monitoring_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StackdriverModule::GetMetadata() const {
  protobuf_config_2fstackdriver_5fmodule_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_config_2fstackdriver_5fmodule_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::config::StackdriverModule* Arena::CreateMaybeMessage< ::config::StackdriverModule >(Arena* arena) {
  return Arena::CreateInternal< ::config::StackdriverModule >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
