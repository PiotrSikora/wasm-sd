// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config/stackdriver_module.proto

#ifndef PROTOBUF_INCLUDED_config_2fstackdriver_5fmodule_2eproto
#define PROTOBUF_INCLUDED_config_2fstackdriver_5fmodule_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_config_2fstackdriver_5fmodule_2eproto 

namespace protobuf_config_2fstackdriver_5fmodule_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_config_2fstackdriver_5fmodule_2eproto
namespace config {
class StackdriverModule;
class StackdriverModuleDefaultTypeInternal;
extern StackdriverModuleDefaultTypeInternal _StackdriverModule_default_instance_;
class StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse;
class StackdriverModule_MonitoredResourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern StackdriverModule_MonitoredResourceLabelsEntry_DoNotUseDefaultTypeInternal _StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse_default_instance_;
}  // namespace config
namespace google {
namespace protobuf {
template<> ::config::StackdriverModule* Arena::CreateMaybeMessage<::config::StackdriverModule>(Arena*);
template<> ::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::config::StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace config {

// ===================================================================

class StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse();
  StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse& other);
  static const StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse*>(&_StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StackdriverModule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.StackdriverModule) */ {
 public:
  StackdriverModule();
  virtual ~StackdriverModule();

  StackdriverModule(const StackdriverModule& from);

  inline StackdriverModule& operator=(const StackdriverModule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StackdriverModule(StackdriverModule&& from) noexcept
    : StackdriverModule() {
    *this = ::std::move(from);
  }

  inline StackdriverModule& operator=(StackdriverModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StackdriverModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackdriverModule* internal_default_instance() {
    return reinterpret_cast<const StackdriverModule*>(
               &_StackdriverModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StackdriverModule* other);
  friend void swap(StackdriverModule& a, StackdriverModule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StackdriverModule* New() const final {
    return CreateMaybeMessage<StackdriverModule>(NULL);
  }

  StackdriverModule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StackdriverModule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StackdriverModule& from);
  void MergeFrom(const StackdriverModule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackdriverModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> monitored_resource_labels = 5;
  int monitored_resource_labels_size() const;
  void clear_monitored_resource_labels();
  static const int kMonitoredResourceLabelsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      monitored_resource_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_monitored_resource_labels();

  // string project_id = 3;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 3;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string monitored_resource_type = 4;
  void clear_monitored_resource_type();
  static const int kMonitoredResourceTypeFieldNumber = 4;
  const ::std::string& monitored_resource_type() const;
  void set_monitored_resource_type(const ::std::string& value);
  #if LANG_CXX11
  void set_monitored_resource_type(::std::string&& value);
  #endif
  void set_monitored_resource_type(const char* value);
  void set_monitored_resource_type(const char* value, size_t size);
  ::std::string* mutable_monitored_resource_type();
  ::std::string* release_monitored_resource_type();
  void set_allocated_monitored_resource_type(::std::string* monitored_resource_type);

  // .google.protobuf.Duration flush_interval = 6;
  bool has_flush_interval() const;
  void clear_flush_interval();
  static const int kFlushIntervalFieldNumber = 6;
  private:
  const ::google::protobuf::Duration& _internal_flush_interval() const;
  public:
  const ::google::protobuf::Duration& flush_interval() const;
  ::google::protobuf::Duration* release_flush_interval();
  ::google::protobuf::Duration* mutable_flush_interval();
  void set_allocated_flush_interval(::google::protobuf::Duration* flush_interval);

  // bool enable_logging = 1;
  void clear_enable_logging();
  static const int kEnableLoggingFieldNumber = 1;
  bool enable_logging() const;
  void set_enable_logging(bool value);

  // bool enable_monitoring = 2;
  void clear_enable_monitoring();
  static const int kEnableMonitoringFieldNumber = 2;
  bool enable_monitoring() const;
  void set_enable_monitoring(bool value);

  // @@protoc_insertion_point(class_scope:config.StackdriverModule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      StackdriverModule_MonitoredResourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > monitored_resource_labels_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr monitored_resource_type_;
  ::google::protobuf::Duration* flush_interval_;
  bool enable_logging_;
  bool enable_monitoring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2fstackdriver_5fmodule_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StackdriverModule

// bool enable_logging = 1;
inline void StackdriverModule::clear_enable_logging() {
  enable_logging_ = false;
}
inline bool StackdriverModule::enable_logging() const {
  // @@protoc_insertion_point(field_get:config.StackdriverModule.enable_logging)
  return enable_logging_;
}
inline void StackdriverModule::set_enable_logging(bool value) {
  
  enable_logging_ = value;
  // @@protoc_insertion_point(field_set:config.StackdriverModule.enable_logging)
}

// bool enable_monitoring = 2;
inline void StackdriverModule::clear_enable_monitoring() {
  enable_monitoring_ = false;
}
inline bool StackdriverModule::enable_monitoring() const {
  // @@protoc_insertion_point(field_get:config.StackdriverModule.enable_monitoring)
  return enable_monitoring_;
}
inline void StackdriverModule::set_enable_monitoring(bool value) {
  
  enable_monitoring_ = value;
  // @@protoc_insertion_point(field_set:config.StackdriverModule.enable_monitoring)
}

// string project_id = 3;
inline void StackdriverModule::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StackdriverModule::project_id() const {
  // @@protoc_insertion_point(field_get:config.StackdriverModule.project_id)
  return project_id_.GetNoArena();
}
inline void StackdriverModule::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.StackdriverModule.project_id)
}
#if LANG_CXX11
inline void StackdriverModule::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.StackdriverModule.project_id)
}
#endif
inline void StackdriverModule::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.StackdriverModule.project_id)
}
inline void StackdriverModule::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.StackdriverModule.project_id)
}
inline ::std::string* StackdriverModule::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:config.StackdriverModule.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackdriverModule::release_project_id() {
  // @@protoc_insertion_point(field_release:config.StackdriverModule.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackdriverModule::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:config.StackdriverModule.project_id)
}

// string monitored_resource_type = 4;
inline void StackdriverModule::clear_monitored_resource_type() {
  monitored_resource_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StackdriverModule::monitored_resource_type() const {
  // @@protoc_insertion_point(field_get:config.StackdriverModule.monitored_resource_type)
  return monitored_resource_type_.GetNoArena();
}
inline void StackdriverModule::set_monitored_resource_type(const ::std::string& value) {
  
  monitored_resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.StackdriverModule.monitored_resource_type)
}
#if LANG_CXX11
inline void StackdriverModule::set_monitored_resource_type(::std::string&& value) {
  
  monitored_resource_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.StackdriverModule.monitored_resource_type)
}
#endif
inline void StackdriverModule::set_monitored_resource_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitored_resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.StackdriverModule.monitored_resource_type)
}
inline void StackdriverModule::set_monitored_resource_type(const char* value, size_t size) {
  
  monitored_resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.StackdriverModule.monitored_resource_type)
}
inline ::std::string* StackdriverModule::mutable_monitored_resource_type() {
  
  // @@protoc_insertion_point(field_mutable:config.StackdriverModule.monitored_resource_type)
  return monitored_resource_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackdriverModule::release_monitored_resource_type() {
  // @@protoc_insertion_point(field_release:config.StackdriverModule.monitored_resource_type)
  
  return monitored_resource_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackdriverModule::set_allocated_monitored_resource_type(::std::string* monitored_resource_type) {
  if (monitored_resource_type != NULL) {
    
  } else {
    
  }
  monitored_resource_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitored_resource_type);
  // @@protoc_insertion_point(field_set_allocated:config.StackdriverModule.monitored_resource_type)
}

// map<string, string> monitored_resource_labels = 5;
inline int StackdriverModule::monitored_resource_labels_size() const {
  return monitored_resource_labels_.size();
}
inline void StackdriverModule::clear_monitored_resource_labels() {
  monitored_resource_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
StackdriverModule::monitored_resource_labels() const {
  // @@protoc_insertion_point(field_map:config.StackdriverModule.monitored_resource_labels)
  return monitored_resource_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
StackdriverModule::mutable_monitored_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:config.StackdriverModule.monitored_resource_labels)
  return monitored_resource_labels_.MutableMap();
}

// .google.protobuf.Duration flush_interval = 6;
inline bool StackdriverModule::has_flush_interval() const {
  return this != internal_default_instance() && flush_interval_ != NULL;
}
inline const ::google::protobuf::Duration& StackdriverModule::_internal_flush_interval() const {
  return *flush_interval_;
}
inline const ::google::protobuf::Duration& StackdriverModule::flush_interval() const {
  const ::google::protobuf::Duration* p = flush_interval_;
  // @@protoc_insertion_point(field_get:config.StackdriverModule.flush_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* StackdriverModule::release_flush_interval() {
  // @@protoc_insertion_point(field_release:config.StackdriverModule.flush_interval)
  
  ::google::protobuf::Duration* temp = flush_interval_;
  flush_interval_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* StackdriverModule::mutable_flush_interval() {
  
  if (flush_interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    flush_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:config.StackdriverModule.flush_interval)
  return flush_interval_;
}
inline void StackdriverModule::set_allocated_flush_interval(::google::protobuf::Duration* flush_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(flush_interval_);
  }
  if (flush_interval) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(flush_interval)->GetArena();
    if (message_arena != submessage_arena) {
      flush_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flush_interval, submessage_arena);
    }
    
  } else {
    
  }
  flush_interval_ = flush_interval;
  // @@protoc_insertion_point(field_set_allocated:config.StackdriverModule.flush_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_config_2fstackdriver_5fmodule_2eproto
